#!/usr/bin/env perl
use 5.020_000;
use warnings;
use Path::Tiny qw<path>;

my $sha = shift or die "Usage: $0 <sha>\n";

my $C_FILE = path('src/iterm2_color_schemes/ansi_color_palette.c');
my $H_FILE = path('src/iterm2_color_schemes/ansi_color_palette.h');
my $NAMED  = path('src/iterm2_color_schemes/named_palettes.h');

my $now = scalar localtime;

my $c_contents = <<"C";
// Generated by $0 from https://github.com/mbadolato/iTerm2-Color-Schemes/ at $sha
#ifdef ITERM2_COLOR_SCHEMES
#include "../structs/ansi_color_palette.h"
// clang-format off
C
my $h_contents = <<"C";
// Generated by $0 from https://github.com/mbadolato/iTerm2-Color-Schemes/ at $sha
#ifdef ITERM2_COLOR_SCHEMES
#ifndef ITERM2_COLOR_SCHEMES_ANSI_COLOR_PALETTE_H_
#define ITERM2_COLOR_SCHEMES_ANSI_COLOR_PALETTE_H_
// clang-format off
C
my $named_contents = <<"C";
// Generated by $0 from https://github.com/mbadolato/iTerm2-Color-Schemes/ at $sha
#ifdef ITERM2_COLOR_SCHEMES
#ifndef ITERM2_COLOR_SCHEMES_NAMED_PALETTES_H_
#define ITERM2_COLOR_SCHEMES_NAMED_PALETTES_H_
// clang-format off
C

my @files = sort map { "$_" } path('iTerm2-Color-Schemes/Xresources/')->children;
for my $filename (@files) {
    my $file = path($filename);
    my $name = 'iTerm2 Color Schemes: ' . $file->basename;
    my $base = lc $file->basename =~ s![+]!plus!xmsgr =~ s![-]!_!xmsgr =~ s![^a-z0-9]!_!ximsgr =~ s!_+!_!gr =~ s!^_+!!r =~ s!_+$!!r =~ s!\A!i2_!r;
    my $spec = {
        foreground => undef,
        background => undef,
        (map { "color$_" => undef }, 0..15),
    };
    my @lines = $file->lines_utf8({ chomp => 1 });
    for my $line (@lines) {
        if ($line =~ m!^[*][.](color\d+|foreground|background):\s*[#]([a-fA-F0-9]{6})!) {
            my ($k, $v) = ($1, $2);
            my ($r, $g, $b) = $v =~ m!(..)(..)(..)!;
            $spec->{$k} = [ map { hex } $r, $g, $b ];
        }
    }
    my @undefined;
    for my $k (sort keys %$spec) {
        push @undefined, $k if !defined $spec->{$k};
    }
    if (@undefined) {
        warn "$file: missing: @undefined\n";
        next;
    }
    my $var_name = "PALETTE_\U$base";
    my $real_var_name = "real_$var_name";
    $c_contents .= "\n";
    $c_contents .= "// $file: $name -> $base\n";
    $c_contents .= "struct ansi_color_palette $real_var_name = {\n";
    $c_contents .= "    \"$name\",\n";
    $c_contents .= sprintf "    {0x%02X, 0x%02X, 0x%02X},\n", @{ $spec->{background} };
    $c_contents .= sprintf "    {0x%02X, 0x%02X, 0x%02X},\n", @{ $spec->{foreground} };
    for (0..15) {
        $c_contents .= "    {\n" if ($_ == 0);
        $c_contents .= sprintf "      {0x%02X, 0x%02X, 0x%02X},\n", @{ $spec->{"color$_"} };
        $c_contents .= "      },\n" if ($_ == 7 || $_ == 15);
        $c_contents .= "    {\n" if ($_ == 7);
    }
    $c_contents .= "};\n";
    $c_contents .= "struct ansi_color_palette *$var_name = &$real_var_name;\n";
    $h_contents .= "extern struct ansi_color_palette *$var_name;\n";
    $named_contents .= sprintf "{%-36s %-41s},\n",
        qq["$base",], $var_name;
}
$h_contents .= "#endif\n";
$named_contents .= "#endif\n";
$c_contents .= "#endif\n";
$h_contents .= "#endif\n";
$named_contents .= "#endif\n";

$C_FILE->spew_utf8($c_contents);
$H_FILE->spew_utf8($h_contents);
$NAMED->spew_utf8($named_contents);
